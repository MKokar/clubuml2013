package Repository;
/**
 * @author
 * Joanne Zhuo
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import Domain.EditingHistory; 

public class EditingHistoryDAO {
	/** Add a history into DB */
	public static boolean addHistory (EditingHistory history) {
		ResultSet rs;
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(
			"INSERT into EditingHistory(diagram_Id, user_Id, EditingTime) VALUES(?,?,?);", Statement.RETURN_GENERATED_KEYS);
			pstmt.setInt(1, history.getDiagramId());
			pstmt.setInt(2, history.getUserId());
			pstmt.setTimestamp(3, getCurrentJavaSqlTimestamp()); 

			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();
			
			// Get userId generated by DB back, and set it in user object
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
			  int newId = rs.getInt(1);
			  history.setEditingHistoryId(newId);
			}
			rs.close();
			pstmt.close();
		    conn.close();
		} 
		catch (SQLException e) {
			throw new IllegalArgumentException (e.getMessage(), e);
		} 

		return true;
	}
	
	 public static java.sql.Timestamp getCurrentJavaSqlTimestamp() {
		    java.util.Date date = new java.util.Date();
		    return new java.sql.Timestamp(date.getTime());
	}
	
	 /** retrieve history priority queue from DB */
	public static List<EditingHistory> getPriorityList () {
		List<EditingHistory> historyList = new LinkedList<EditingHistory>();
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(
			"SELECT * " +
			"FROM editingHistory as e JOIN " +
			"(SELECT MAX(EditingTime) as max_time, diagram_Id" +
			" FROM editingHistory" +
			" GROUP BY diagram_Id) as tmp ON e.diagram_Id = tmp.diagram_Id AND e.EditingTime = tmp.max_time;");
			// Execute the SQL statement and store result into the ResultSet
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
			
				// Parse Events and store in a LinkedList
				historyList.add(new EditingHistory( 
							rs.getInt("editingHistory_Id"), 
							rs.getInt("diagram_Id"), 
							rs.getInt("user_Id"),
							rs.getTimestamp("EditingTime").toString()
										 ));  
			}
			 
			rs.close();
			pstmt.close();
		    conn.close();
			 
		} catch (SQLException e) {
			throw new IllegalArgumentException (e.getMessage(), e);
		}
		return historyList; 
	}
}
