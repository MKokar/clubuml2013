package Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import Domain.Project; 

public class ProjectDAO {
	
	/** Add project into DB */
	public static boolean addProject (Project project) {
		ResultSet rs;
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(
			"INSERT into project(projectName, description, achived) VALUES(?,?,?);");
			pstmt.setString(1, project.getProjectName());
			pstmt.setString(2, project.getDescription());
			pstmt.setByte(3, project.isAchived()); 

			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();
			
			// Get projectId generated by DB back, and set it in project object
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
			  int newId = rs.getInt(1);
			  project.setProjectId(newId);
			}
			
			rs.close();
			pstmt.close();
		    conn.close();
		} 
		catch (SQLException e) {
			throw new IllegalArgumentException (e.getMessage(), e);
		}
		  
		return true;
	}
	
	/** Get project from DB by name */
	public static Project getProject(String projectName)
	{
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(
			"SELECT * FROM project where projectName = ? ;");
			pstmt.setString(1, projectName); 

			// Execute the SQL statement and store result into the ResultSet
			ResultSet rs = pstmt.executeQuery();

			if (!rs.next()) {
				return null;
			}
			
			Project project = new Project(rs.getInt("project_Id"), projectName,rs.getString("description"),rs.getByte("achived")); 
			
			rs.close();
			pstmt.close();
		    conn.close();
		    
			return project;
			
		} catch (SQLException e) {
			System.out.println("Using default model.");
		}
		return null;  
	}
	
	/** Remove a project from DB */
	public static boolean removeProject(String projectName) 
	{
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(
			"DELETE FROM project where projectName = ?;");
			pstmt.setString(1, projectName);

			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();
		 
			pstmt.close();
		    conn.close(); 
			return true;
		} catch (SQLException e) {
			throw new IllegalArgumentException (e.getMessage(), e);
		}
	}
}
